# Welcome to Facebook!
# This is just a simple shared plaintext pad, with no execution capabilities.
# When you know what language you would like to use for your interview,
# simply choose it from the dropdown in the top bar.
# Enjoy your interview!
# Given an array
                    
                 
#     13 12 11 10 25
#     14 3  2  9  24
#     15 4  1  8  23
#     16 5  6  7  22
#     17 18 19 20 21
                  
# and the starting coordinates (2,1), print the list generated by the spiral rotating counterclockwise starting with the up direction.
# [4, 3, 14, 15, 16, 5, 6, 1, 2, 11, 12, 13, 17, 18, 19, 20, 7, 8, 9, 10, 21, 22, 23, 24, 25]


dirs = [[0,-1],[1, 0],[0,1],[-1,0]]
def count2DArr(board, oi, oj):   
    layerList = []
    if not board or len(board) == 0 or len(board[0]) == 0:
        return []
    
    row, col = len(board), len(board[0])
# layerList: [[4], [3,14,15,4..]...]    
    layerList.append([board[oi][oj]])  
    level = max(abs(0 - oi), abs(0 - oj), abs(row - oi), abs(col - oj))
    
    for l in range(1, level + 1):
        si, sj = oi - l, oj + l
        generateLayer(board, si, sj, l, oi, oj, layerList)
        
    finalRes =[]
    
    for items in layerList:
        for val in items:
            finalRes.append(val)      
    return finalRes
         
def generateLayer(board, i, j, level, oi, oj, layerList):
    res = []    
    previ = i
    prevj = j  
    idx_direction = 0
    curr_direction = dirs[idx_direction]
    while idx_direction < 4:
        newi = previ + curr_direction[0]
        newj = prevj + curr_direction[1]
        if newi >= 0 and newj >= 0 and newi < len(board) and newj < len(board):
            res.append(board[newi][newj])      
        if newi == i and newj == j:
            break
        if abs(newi - oi) == level and abs(newj - oj) == level:
            idx_direction += 1
            curr_direction = dirs[idx_direction]
        previ = newi
        prevj = newj

    layerList.append(res)



board = [[13 ,12 ,11 ,10 ,25],[14, 3,  2,  9,  24],[15, 4,  1,  8,  23],[16, 5,  6 , 7 , 22],[17, 18, 19, 20, 21]]



if __name__ == "__main__":
    print(count2DArr(board, 2,1))   




